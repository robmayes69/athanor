from django.conf import settings

from evennia.utils.utils import lazy_property
from evennia.typeclasses.models import TypeclassBase

import athanor
from athanor.models import ServerSessionDB, HostAddress, ProtocolName
from athanor.serversessions.handlers import ServerSessionCmdHandler, ServerSessionCmdSetHandler


class DefaultServerSession(ServerSessionDB, metaclass=TypeclassBase):
    # The Session is always the first thing to matter when parsing commands.
    _cmd_sort = -1000

    @lazy_property
    def cmdset(self):
        return ServerSessionCmdSetHandler(self, True)

    @classmethod
    def create(cls, sessid, django_key, address, protocol, handler):
        """
        Gets-or-creates a Session matching the SessionID given by the portal.

        Args:
            sessid (UUID4): A UUID4 generated by the Portal.
            django_key (str): A 32-40 character string generated by Django for Django Sessions.
            address (str): The IP address of the host that's connecting.
            protocol (str): The type of protocol being used to connect.
            handler (ServerSessionHandler): The ServerSessionHandler singleton.
        """
        if (found := DefaultServerSession.objects.filter_family(id=sessid).first()):
            found.ndb.handler = handler
            return found

        address_model, created = HostAddress.objects.get_or_create(host_ip=address)
        if created:
            address_model.save()

        protocol_name, created2 = ProtocolName.objects.get_or_create(name=protocol)
        if created2:
            protocol_name.save()

        sess = cls.objects.create(id=sessid, django_session_key=django_key, db_host=address_model,
                                  db_protocol=protocol_name, db_cmdset_storage=settings.CMDSET_LOGINSCREEN)
        sess.ndb.handler = handler
        return sess

    @property
    def account(self):
        return self.db_account

    @account.setter
    def account(self, value):
        old_account = self.db_account
        if value is None and old_account is None:
            #  Nothing to do if we're setting None to None.
            return
        if old_account == value:
            #  Do nothing if we are setting it to what it already is.
            return
        if value:
            self.cmdset.add(settings.CMDSET_SELECTSCREEN, permanent=True, default_cmdset=True)
        else:
            self.cmdset.add(settings.CMDSET_LOGINSCREEN, permanent=True, default_cmdset=True)

        self.db_account = value
        self.save(update_fields=['db_account'])

    @property
    def play_session(self):
        return self.db_play_session

    @play_session.setter
    def play_session(self, value):
        old_play = self.db_play_session
        if old_play is None and value is None:
            return  # Nothing to do here...
        if old_play == value:
            return  # Nothing to do here...
        if value:
            self.cmdset.add(settings.CMDSET_ACTIVE, permanent=True, default_cmdset=True)
        else:
            self.cmdset.add(settings.CMDSET_SELECTSCREEN, permanent=True, default_cmdset=True)
        self.db_play_session = value
        self.save(update_fields=['db_play_session'])

    @lazy_property
    def cmd(self):
        return ServerSessionCmdHandler(self)


    def at_sync(self):
        pass

    def at_disconnect(self, reason=None):
        """
        Hook called by connectionhandler when disconnecting this session.
        """
        pass

    @property
    def styler(self):
        if self.account:
            return self.account.styler
        return athanor.api()['styler'](self)

    @property
    def colorizer(self):
        if self.account:
            return self.account.colorizer
        return dict()

    def generate_substitutions(self, viewer):
        return {
            "name": str(self),
            "address": self.db_host
        }

    def system_msg(self, text=None, system_name=None, enactor=None):
        sysmsg_border = settings.OPTIONS_ACCOUNT_DEFAULT.get('sys_msg_border')[2]
        sysmsg_text = settings.OPTIONS_ACCOUNT_DEFAULT.get('sys_msg_text')[2]
        formatted_text = f"|{sysmsg_border}-=<|n|{sysmsg_text}{system_name.upper()}|n|{sysmsg_border}>=-|n {text}"
        self.msg(text=formatted_text, system_name=system_name, original_text=text)

    def receive_template_message(self, text, msgobj, target):
        self.system_msg(text=text, system_name=msgobj.system_name)

    def render_character_menu_line(self, cmd):
        return f"({self.sessid}) {self.protocol_key} from {self.address} via {self.protocol_key}"


    def __str__(self):
        """
        String representation of the user session class. We use
        this a lot in the server logs.
        """
        return repr(self)

    def __repr__(self):
        return f"<({self.id}) {str(self.db_protocol).capitalize()}: {self.account}:" \
               f"{self.play_session}@{str(self.db_host)}>"
